# -*- coding: utf-8 -*-
"""RiskSpan Assessment Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12TylLQMQF5-CHPGsaMNAyU9FXQKCC3T-

# Metadata
"""

#Import the necessary libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import csv
import numpy as np
print("Done!")

#Upload the CSV file onto a DataFrame
orig_df = pd.read_csv('/content/RiskSpanSkillsAssessment.xlsx - Data.csv')
print("Done!")

#Check and make sure the Dataframe
orig_df

#Review the data types for each column of the dataset
orig_df.dtypes

#Notice that some of the Date columns are of type object instead of datetime, will have to change that later.

#Based on the reports that must be submitted, these are the columns that will be used
reports_df = orig_df[['LENDER_INST_TYPE_DESCRIPTION',' CURRENT_BALANCE ','LTV', 'FICO_SCORE', 'LOAN_ORIG_DATE', 'START_DATE']].copy()

reports_df

reports_df.dtypes

#Rename CURRENT_BALANCE and ORIG_VALUE to remove the extra spaces on the ends
reports_df = reports_df.rename(columns={' CURRENT_BALANCE ': 'CURRENT_BALANCE'})

reports_df.dtypes

#Next is to fix the datatypes for the columns that should not be of type strings/objects
reports_df[['LOAN_ORIG_DATE', 'START_DATE']] = pd.to_datetime(reports_df[['LOAN_ORIG_DATE', 'START_DATE']].stack(), infer_datetime_format=True).unstack()

reports_df.dtypes

#removes '$', ',', and '.' from the string in order convert values from type object to type float
reports_df['CURRENT_BALANCE'] = reports_df['CURRENT_BALANCE'].str.replace('$','')
reports_df['CURRENT_BALANCE'] = reports_df['CURRENT_BALANCE'].str.replace(',','')
reports_df['CURRENT_BALANCE'] = reports_df['CURRENT_BALANCE'].str.replace('.','')

reports_df

#After removing the '.', the values got increased by 100, will have to accomodate after converting the values from object to float
reports_df['CURRENT_BALANCE'] = pd.to_numeric(reports_df['CURRENT_BALANCE'], errors='coerce')/100

reports_df

reports_df.dtypes

reports_df.to_csv(r'Manipulated_df.csv', index = False)

"""Metrics function to avoid repeating codings"""

def metrics (df):
    temp_data = pd.DataFrame()
    temp_data['Loan Count'] = df.groupby(df.columns[0])[df.columns[1]].count()
    temp_data['Average Current Balance'] = round(df.groupby(df.columns[0])[df.columns[1]].mean(), 2)
    temp_data['Max Current Balance'] = round(df.groupby(df.columns[0])[df.columns[1]].max(), 2)
    temp_data['Min Current Balance'] = round(df.groupby(df.columns[0])[df.columns[1]].min(), 2)
    temp_data.loc['Total'] = temp_data[temp_data.columns[:]].sum()
    display(temp_data)

"""# Report 1: Data by Lender Institution Type"""

#First create a new dataframe for this specific report
report1 = reports_df[['LENDER_INST_TYPE_DESCRIPTION','CURRENT_BALANCE']].copy()

report1

#Group the loans based on lender type
metrics(report1)

"""# Report 2: Data by LTV Cohorts"""

#Make a copy of the dataset
report2 = reports_df[['LTV','CURRENT_BALANCE']].copy()

report2

#Categorizing the Current balance based on their LTV conditions
x = report2['LTV']
report2['Conditions'] = np.where(x > 95, '>95%', 
                            np.where((95 >= x) & (x > 90), '>90% and <=95%', 
                                np.where((90 >= x) & (x > 85), '>85% and <=90%', 
                                    np.where(85 >= x, '<=85%', 0)
                                )
                            )
                        )

#Pass the new dataframe into the metrics function to get the information we need
metrics(report2[['Conditions','CURRENT_BALANCE']])

"""# Report 3: Data by Loan Age Cohorts"""

report3 = reports_df[['CURRENT_BALANCE','LOAN_ORIG_DATE','START_DATE']].copy()

report3

report3['LOAN_AGE'] = ((report3['START_DATE'] - report3['LOAN_ORIG_DATE'])/np.timedelta64(1, 'M'))

report3[['LOAN_AGE','CURRENT_BALANCE']]

x = report3['LOAN_AGE']
report3['Conditions'] = np.where(x < 10, '0 - 9 Months',
                                np.where((x >= 10) & (x < 20), '10 - 19 Months',
                                        np.where((x >= 20) & (x < 30), '20 - 29 Months',
                                                np.where((x >= 30) & (x < 40), '30 - 39 Months',
                                                        np.where(x >= 40, '>=40 Months', 'Unknown')
                                                )         
                                        )          
                                )
                        )

metrics(report3[['Conditions','CURRENT_BALANCE']])

"""# Report 4: Sum of Current UPB by LTV and FICO Cohorts"""

report4 = reports_df[['FICO_SCORE','CURRENT_BALANCE']].copy()

report4['LTV Conditions'] = report2['Conditions']

report4

x = report4['FICO_SCORE']
report4['FICO_Conditions'] =    np.where(x < 600, '< 600', 
                                        np.where((x>=600) & (x<700), '600 - 699', 
                                                np.where((x>=700)&(x<800), '700 - 799', 
                                                        np.where(x>=800, '>= 800', 0)
                                                        )
                                                )
                                      )

report4

df = report4.groupby(['FICO_Conditions','LTV Conditions']).agg({'CURRENT_BALANCE': ['sum']})
df

"""Seaborn Chart for Report 4"""

sns.barplot(data=report4, x="FICO_Conditions", y="CURRENT_BALANCE", hue="LTV Conditions").set(title='Sum of Current Unpaid Balance', xlabel="Fico Score Range", ylabel="Current Unpaid Balance")
plt.legend(bbox_to_anchor=(1.4, .9), loc='upper right', borderaxespad=0, title = "LTV Range")